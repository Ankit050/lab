{
  "title": "Protein Folding",
  "publicationStatus": "public",
  "subtitle": "Explore simple protein folding.",
  "fontScale": 0.6,
  "about": [
    "Discover how the properties of amino acids in a protein interact with their",
    "environment to cause proteins to fold in a particular way.",
    "",
    "Generate different proteins, select the solvent type, and change the color",
    "scheme for amino acids using the buttons below the model.",
    "",
    "Change specific amino acids in a protein by right-clicking on them."
  ],
  "models": [
    {
      "id": "amino-acids$0",
      "url": "/imports/legacy-mw-content/converted/conversion-and-physics-examples/amino-acids$0.json",
      "viewOptions": {
        "controlButtons": "play_reset_step",
        "showClock": false
      }
    }
  ],
  "components": [
    {
      "type": "checkbox",
      "id": "show-labels",
      "text": "Use Three-Letter Codes",
      "property": "useThreeLetterCode"
    },
    {
      "type": "pulldown",
      "id": "select-solvent",
      "options": [
        {
          "text": "Select the solvent type",
          "disabled": true,
          "selected": true
        },
        {
          "text": "vacuum",
          "action": "setSolvent('vacuum');"
        },
        {
          "text": "oil",
          "action": "setSolvent('oil');"
        },
        {
          "text": "water",
          "action": "setSolvent('water');"
        }
      ]
    },
    {
      "type": "pulldown",
      "id": "select-color-scheme",
      "options": [
        {
          "text": "Select the color scheme for the amino acids",
          "disabled": true,
          "selected": true
        },
        {
          "text": "none",
          "action": "set({aminoAcidColorScheme: 'none'});"
        },
        {
          "text": "charge",
          "action": "set({aminoAcidColorScheme: 'charge'});"
        },
        {
          "text": "hydrophobicity",
          "action": "set({aminoAcidColorScheme: 'hydrophobicity'});"
        },
        {
          "text": "charge and hydrophobicity",
          "action": "set({aminoAcidColorScheme: 'chargeAndHydro'});"
        }
      ]
    },
    {
      "type": "button",
      "id": "phobic-button",
      "text": "All Hydrophobic",
      "action": [
        "var opt = {supressRepaint: true};",
        "var phobicAA = [5,9,12,14,15,17,18,19,22,23,24];",
        "for (var i = 0; i < getNumberOfAtoms(); i++) {",
          "setAtomProperties(i, {element: phobicAA[Math.round(Math.random()*(phobicAA.length-1))]}, false, false, opt);",
        "}",
        "repaint();"
        ]
    },
    {
      "type": "button",
      "id": "philic-button",
      "text": "All Hydrophilic",
      "action": [
        "var opt = {supressRepaint: true};",
        "var philicAA = [6,7,8,10,11,13,16,20,21];",
        "for (var i = 0; i < getNumberOfAtoms(); i++) {",
          "setAtomProperties(i, {element: philicAA[Math.round(Math.random()*(philicAA.length-1))]}, false, false, opt);",
        "}",
        "repaint();"
        ]
    },
    {
      "type": "button",
      "id": "mostly-phobic-button",
      "text": "Mostly Hydrophobic",
      "action": [
        "var opt = {supressRepaint: true};",
        "var phobicAA = [5,9,12,14,15,17,18,19,22,23,24];",
        "var philicAA = [6,7,8,10,11,13,16,20,21];",
        "var phobic,philic;",
        "for (var i = 0; i < getNumberOfAtoms(); i++) {",
          "phobic = phobicAA[Math.round(Math.random()*(phobicAA.length-1))];",
          "philic = philicAA[Math.round(Math.random()*(philicAA.length-1))];",
          "setAtomProperties(i, {element: (Math.random() > 0.2 ? phobic : philic) }, false, false, opt);",
        "}",
        "repaint();"
        ]
    },
    {
      "type": "button",
      "id": "mostly-philic-button",
      "text": "Mostly Hydrophilic",
      "action": [
        "var opt = {supressRepaint: true};",
        "var phobicAA = [5,9,12,14,15,17,18,19,22,23,24];",
        "var philicAA = [6,7,8,10,11,13,16,20,21];",
        "var phobic,philic;",
        "for (var i = 0; i < getNumberOfAtoms(); i++) {",
          "phobic = phobicAA[Math.round(Math.random()*(phobicAA.length-1))];",
          "philic = philicAA[Math.round(Math.random()*(philicAA.length-1))];",
          "setAtomProperties(i, {element: (Math.random() < 0.2 ? phobic : philic) }, false, false, opt);",
        "}",
        "repaint();"
        ]
    },
    {
      "type": "button",
      "id": "random-button",
      "text": "Random Mix",
      "action": [
        "var opt = {supressRepaint: true};",
        "for (var i = 0; i < getNumberOfAtoms(); i++) {",
          "setAtomProperties(i, {element: (Math.floor(Math.random() * 20) + 5)}, false, false, opt);",
        "}",
        "repaint();"
        ]
    },
    {
      "type": "button",
      "id": "random-protein-button",
      "text": "Generate Random Protein",
      "action": "generateRandomProtein(40);"
    }
  ],
  "layout": {
    "bottom": [
      ["show-labels", "select-color-scheme", "select-solvent"],
      ["random-protein-button"]
    ]
  }
}