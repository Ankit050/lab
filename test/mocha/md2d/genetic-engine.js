// Generated by CoffeeScript 1.4.0
var GeneticEngine, Model, helpers;

helpers = require('../../helpers');

helpers.setupBrowserEnvironment();

GeneticEngine = requirejs('md2d/models/engine/genetic-engine');

Model = requirejs('md2d/models/modeler');

describe("GeneticEngine", function() {
  return describe("[basic tests of the class]", function() {
    describe("GeneticEngine constructor", function() {
      it("should exist", function() {
        return should.exist(GeneticEngine);
      });
      return it("should act as a constructor", function() {
        var geneticEngine;
        geneticEngine = new GeneticEngine(new Model({}));
        return should.exist(geneticEngine);
      });
    });
    return describe("GeneticEngine instance", function() {
      var checkDNAArray, checkMRNAArray, geneticEngine, mock, model;
      model = null;
      geneticEngine = null;
      mock = {
        changeListener: function() {},
        transitionListener: function() {
          return geneticEngine.transitionEnded();
        }
      };
      before(function() {
        model = new Model({
          DNA: "ATCG"
        });
        return geneticEngine = model.geneticEngine();
      });
      beforeEach(function() {
        sinon.spy(mock, "changeListener");
        sinon.spy(mock, "transitionListener");
        geneticEngine.on("change", mock.changeListener);
        return geneticEngine.on("transition", mock.transitionListener);
      });
      afterEach(function() {
        mock.changeListener.restore();
        return mock.transitionListener.restore();
      });
      checkDNAArray = function(array, sequence) {
        var i, offset, _i, _ref, _results;
        offset = geneticEngine.PRECODING_LEN;
        _results = [];
        for (i = _i = 0, _ref = sequence.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          array[i + offset].idx.should.eql(i + offset);
          _results.push(array[i + offset].type.should.eql(sequence[i]));
        }
        return _results;
      };
      checkMRNAArray = function(array, sequence) {
        var i, _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = sequence.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          array[i].idx.should.eql(i);
          _results.push(array[i].type.should.eql(sequence[i]));
        }
        return _results;
      };
      it("should automatically change lower case DNA string to upper case", function() {
        model.set("DNA", "atgc");
        model.get("DNA").should.eql("ATGC");
        model.set("DNA", "aTGc");
        model.get("DNA").should.eql("ATGC");
        model.set("DNA", "AtgC");
        model.get("DNA").should.eql("ATGC");
        model.set("DNA", "aTgC");
        return model.get("DNA").should.eql("ATGC");
      });
      it("should reset DNAState to translation:0 if DNA is changed during translation:x steps", function() {
        model.set("DNA", "ATCG");
        model.set("DNAState", "translation:0");
        geneticEngine.transitionToNextState();
        model.get("DNAState").should.eql("translation:1");
        model.set("DNA", "ATC");
        return model.get("DNAState").should.eql("translation:0");
      });
      it("should calculate view arrays and dispatch appropriate event after setting DNA", function() {
        mock.changeListener.callCount.should.eql(0);
        model.set("DNAState", "dna");
        model.set("DNA", "ATGC");
        checkDNAArray(geneticEngine.viewModel.DNAOpt, "ATGC");
        checkDNAArray(geneticEngine.viewModel.DNACompOpt, "TACG");
        checkDNAArray(geneticEngine.viewModel.mRNA, "");
        mock.changeListener.callCount.should.eql(2);
        return mock.transitionListener.callCount.should.eql(0);
      });
      it("should calculate mRNA when state is set to 'transcription-end' or 'translation'", function() {
        model.set("DNAState", "transcription-end");
        checkMRNAArray(geneticEngine.viewModel.mRNA, "AUGC");
        mock.changeListener.callCount.should.eql(1);
        return mock.transitionListener.callCount.should.eql(0);
      });
      it("should perform single step of DNA to mRNA transcription", function() {
        model.set("DNAState", "dna");
        checkMRNAArray(geneticEngine.viewModel.mRNA, "");
        geneticEngine.transcribeStep();
        checkMRNAArray(geneticEngine.viewModel.mRNA, "");
        geneticEngine.transcribeStep();
        checkMRNAArray(geneticEngine.viewModel.mRNA, "A");
        geneticEngine.transcribeStep("A");
        checkMRNAArray(geneticEngine.viewModel.mRNA, "A");
        geneticEngine.transcribeStep("U");
        return checkMRNAArray(geneticEngine.viewModel.mRNA, "AU");
      });
      it("should transcribe mRNA from DNA and dispatch appropriate events", function() {
        model.set("DNAState", "dna");
        model.set({
          DNA: "ATGC"
        });
        geneticEngine.transitionTo("transcription-end");
        mock.transitionListener.callCount.should.eql(5);
        return checkMRNAArray(geneticEngine.viewModel.mRNA, "AUGC");
      });
      it("shouldn't allow setting DNAState to translation:x, where x > 0", function() {
        model.set("DNAState", "translation:15");
        return model.get("DNAState").should.eql("translation:0");
      });
      it("should allow jumping to the next state", function() {
        model.set("DNA", "ATGC");
        model.set("DNAState", "intro-cells");
        geneticEngine.jumpToNextState();
        model.get("DNAState").should.eql("intro-zoom1");
        geneticEngine.jumpToNextState();
        model.get("DNAState").should.eql("intro-zoom2");
        geneticEngine.jumpToNextState();
        model.get("DNAState").should.eql("intro-zoom3");
        geneticEngine.jumpToNextState();
        model.get("DNAState").should.eql("intro-polymerase");
        geneticEngine.jumpToNextState();
        model.get("DNAState").should.eql("dna");
        geneticEngine.jumpToNextState();
        model.get("DNAState").should.eql("transcription:0");
        geneticEngine.jumpToNextState();
        model.get("DNAState").should.eql("transcription:1");
        geneticEngine.jumpToNextState();
        model.get("DNAState").should.eql("transcription:2");
        geneticEngine.jumpToNextState();
        model.get("DNAState").should.eql("transcription:3");
        geneticEngine.jumpToNextState();
        model.get("DNAState").should.eql("transcription-end");
        geneticEngine.jumpToNextState();
        model.get("DNAState").should.eql("after-transcription");
        geneticEngine.jumpToNextState();
        model.get("DNAState").should.eql("before-translation");
        geneticEngine.jumpToNextState();
        model.get("DNAState").should.eql("translation:0");
        geneticEngine.jumpToNextState();
        return model.get("DNAState").should.eql("translation-end");
      });
      it("should allow jumping to the previous state", function() {
        model.get("DNAState").should.eql("translation-end");
        geneticEngine.jumpToPrevState();
        model.get("DNAState").should.eql("translation:0");
        geneticEngine.jumpToPrevState();
        model.get("DNAState").should.eql("before-translation");
        geneticEngine.jumpToPrevState();
        model.get("DNAState").should.eql("after-transcription");
        geneticEngine.jumpToPrevState();
        model.get("DNAState").should.eql("transcription-end");
        geneticEngine.jumpToPrevState();
        model.get("DNAState").should.eql("transcription:3");
        geneticEngine.jumpToPrevState();
        model.get("DNAState").should.eql("transcription:2");
        geneticEngine.jumpToPrevState();
        model.get("DNAState").should.eql("transcription:1");
        geneticEngine.jumpToPrevState();
        model.get("DNAState").should.eql("transcription:0");
        geneticEngine.jumpToPrevState();
        model.get("DNAState").should.eql("dna");
        geneticEngine.jumpToPrevState();
        model.get("DNAState").should.eql("intro-polymerase");
        geneticEngine.jumpToPrevState();
        model.get("DNAState").should.eql("intro-zoom3");
        geneticEngine.jumpToPrevState();
        model.get("DNAState").should.eql("intro-zoom2");
        geneticEngine.jumpToPrevState();
        model.get("DNAState").should.eql("intro-zoom1");
        geneticEngine.jumpToPrevState();
        model.get("DNAState").should.eql("intro-cells");
        geneticEngine.jumpToPrevState();
        return model.get("DNAState").should.eql("intro-cells");
      });
      it("should let user perform substitution mutation", function() {
        var offset;
        offset = geneticEngine.PRECODING_LEN;
        model.set("DNAState", "transcription:0");
        model.set("DNA", "ATGC");
        geneticEngine.mutate(0 + offset, "C");
        model.get("DNA").should.eql("CTGC");
        geneticEngine.mutate(1 + offset, "G");
        geneticEngine.mutate(2 + offset, "T");
        geneticEngine.mutate(3 + offset, "A");
        model.get("DNA").should.eql("CGTA");
        geneticEngine.mutate(0 + offset, "A", true);
        model.get("DNA").should.eql("TGTA");
        return model.get("DNAState").should.eql("transcription:0");
      });
      it("should let user perform insertion mutation", function() {
        var offset;
        offset = geneticEngine.PRECODING_LEN;
        model.set("DNA", "ATGC");
        geneticEngine.insert(0 + offset, "A");
        model.get("DNA").should.eql("AATGC");
        geneticEngine.insert(4 + offset, "C");
        model.get("DNA").should.eql("AATGCC");
        geneticEngine.insert(0 + offset, "T", true);
        model.get("DNA").should.eql("AAATGCC");
        return model.get("DNAState").should.eql("transcription:0");
      });
      it("should let user perform insertion mutation in the middle of transcription", function() {
        var offset;
        offset = geneticEngine.PRECODING_LEN;
        model.set("DNA", "ATGC");
        model.set("DNAState", "transcription:3");
        geneticEngine.insert(0 + offset, "A");
        model.get("DNA").should.eql("AATGC");
        model.get("DNAState").should.eql("transcription:4");
        geneticEngine.insert(3 + offset, "G");
        model.get("DNA").should.eql("AATGGC");
        model.get("DNAState").should.eql("transcription:5");
        geneticEngine.insert(5 + offset, "C");
        model.get("DNA").should.eql("AATGGCC");
        return model.get("DNAState").should.eql("transcription:5");
      });
      it("should let user perform deletion mutation", function() {
        var offset;
        offset = geneticEngine.PRECODING_LEN;
        model.set("DNAState", "transcription:0");
        model.set("DNA", "ATGC");
        geneticEngine["delete"](0 + offset);
        model.get("DNA").should.eql("TGC");
        geneticEngine["delete"](2 + offset);
        model.get("DNA").should.eql("TG");
        geneticEngine["delete"](1 + offset);
        model.get("DNA").should.eql("T");
        geneticEngine["delete"](0 + offset);
        model.get("DNA").should.eql("");
        return model.get("DNAState").should.eql("transcription:0");
      });
      it("should let user perform deletion mutation in the middle of transcription", function() {
        var offset;
        offset = geneticEngine.PRECODING_LEN;
        model.set("DNA", "ATGC");
        model.set("DNAState", "transcription:3");
        geneticEngine["delete"](0 + offset);
        model.get("DNA").should.eql("TGC");
        model.get("DNAState").should.eql("transcription:2");
        geneticEngine["delete"](1 + offset);
        model.get("DNA").should.eql("TC");
        model.get("DNAState").should.eql("transcription:1");
        geneticEngine["delete"](1 + offset);
        model.get("DNA").should.eql("T");
        return model.get("DNAState").should.eql("transcription:1");
      });
      it("should provide state() helper methods", function() {
        var state;
        model.set("DNAState", "transcription-end");
        state = geneticEngine.state();
        state.name.should.eql("transcription-end");
        isNaN(state.step).should.be["true"];
        model.set("DNAState", "transcription:15");
        state = geneticEngine.state();
        state.name.should.eql("transcription");
        return state.step.should.eql(15);
      });
      return it("should provide stateBefore() and stateAfter() helper methods", function() {
        model.set("DNAState", "intro-cells");
        geneticEngine.stateBefore("dna").should.be["true"];
        geneticEngine.stateAfter("dna").should.be["false"];
        model.set("DNAState", "transcription");
        geneticEngine.stateBefore("dna").should.be["false"];
        geneticEngine.stateAfter("dna").should.be["true"];
        geneticEngine.stateBefore("translation").should.be["true"];
        geneticEngine.stateAfter("translation").should.be["false"];
        geneticEngine.stateBefore("translation:15").should.be["true"];
        geneticEngine.stateAfter("translation:15").should.be["false"];
        model.set("DNAState", "transcription:15");
        geneticEngine.stateBefore("transcription:14").should.be["false"];
        geneticEngine.stateAfter("transcription:14").should.be["true"];
        geneticEngine.stateBefore("transcription:15").should.be["false"];
        geneticEngine.stateAfter("transcription:15").should.be["false"];
        geneticEngine.stateBefore("transcription:16").should.be["true"];
        return geneticEngine.stateAfter("transcription:16").should.be["false"];
      });
    });
  });
});
