{
  "title": "Pressure Equilibrium",
  "publicationStatus": "public",
  "subtitle": "Explore how heat and number of molecules affect pressure equilibrium between two gases.",
  "about": [
    "There are gases on both sides of a moveable barrier (piston), which stays in the same place (more or less) when you run the model because the gas pressure on the piston is in equilibrium.",
    "Add purple gas molecules and watch what happens to the piston. Reset the model. Now add yellow gas molecules. What happens to the piston?",
    "Try heating or cooling the gas molecules. Explain the change in equilibrium with each change. Which has a greater effect on equilibrium -- changing the number of gas molecules or changing the temperature? Why?",
    "Extension: Have you ever seen a soda can collapse? Watch this (<a href='http://www.youtube.com/watch?v=gFDS3bwAU-s' target='_blank'>http://www.youtube.com/watch?v=gFDS3bwAU-s</a>). Can you explain the collapsing can in terms of pressure equilibrium?"
  ],
  "models": [
    {
      "id": "page7$0",
      "url": "/imports/legacy-mw-content/converted/sam-activities/gas-laws/original-interactives-in-pages/page7/page7$0.json",
      "viewOptions": {
        "controlButtons": "play_reset_step",
        "showVelocityVectors": true
      }
    }
  ],
  "outputs": [
    {
      "name": "avgSpeed",
      "units": "nm/fs?",
      "label": "area",
      "value": [
        "var avgVx = 0;",
        "var avgVy = 0;",
        "var atomNum = getNumberOfAtoms();",
        "for (var i = 0; i < atomNum; i++) {",
        "  avgVx += Math.abs(getAtomProperties(i).vx);",
        "  avgVy += Math.abs(getAtomProperties(i).vy);",
        "}",
        "avgVx /= atomNum;",
        "avgVy /= atomNum;",
        "return { 'avgVx' : avgVx, 'avgVy': avgVy};"
     ]
    }
  ],
  "components": [
    {
      "type": "checkbox",
      "id": "show-velocity",
      "text": "Show Velocity",
      "property": "showVelocityVectors"
    },
    {
      "type": "button",
      "id": "add-inside",
      "text": "Add Yellow Molecule",
      "action": [
        "var elemNum = 3;",
        "var maxX = getObstacleProperties(0).x - getElementProperties(elemNum).sigma;",
        "addAtom({ element: elemNum, x: maxX * Math.random()  , y: get('height') * Math.random(), vx: get('avgSpeed').avgVx, vy: get('avgSpeed').avgVy});"
      ]
    },
    {
      "type": "button",
      "id": "add-outside",
      "text": "Add Purple Molecule",
      "action": [
        "var elemNum = 1;",
        "var minX = getObstacleProperties(0).x + getObstacleProperties(0).width + getElementProperties(elemNum).sigma;",
        "addAtom({ element: elemNum, x: (get('width') - minX) * Math.random() + minX , y: get('height') * Math.random(), vx: get('avgSpeed').avgVx, vy: get('avgSpeed').avgVy});"
      ]
    },
    {
      "type": "button",
      "id": "remove-inside",
      "text": "Remove Yellow Molecule",
      "action": [
        "for (var i = 0; i < getNumberOfAtoms(); i++) {",
        "  if (getAtomProperties(i).x < getObstacleProperties(0).x) {",
        "     removeAtom(i);",
        "     break;",
        "   }",
        "}"
      ]
    },
    {
      "type": "button",
      "id": "remove-outside",
      "text": "Remove Purple Molecule",
      "action": [
        "for (var i = 0; i < getNumberOfAtoms(); i++) {",
        "  if (getAtomProperties(i).x > (getObstacleProperties(0).x + getObstacleProperties(0).width)) {",
        "     removeAtom(i);",
        "     break;",
        "   }",
        "}"
      ]
    },
    {
      "type": "button",
      "id": "heat-inside",
      "text": "Heat Yellow Gas",
      "action": [
        "if (get('temperature') < 10000) {",
        "  for (var i = 0; i < getNumberOfAtoms(); i++) {",
        "    var atom = getAtomProperties(i);",
        "    if (atom.x < getObstacleProperties(0).x) {",
        "       setAtomProperties(i, { vx: atom.vx * 1.1, vy: atom.vy * 1.1 }, false, false, {supressRepaint: true})",
        "    }",
        "  }",
        "  repaint();",
        "}",
        "else {",
        "    alert('Max temperature reached.');",
        "}"
      ]
    },
    {
      "type": "button",
      "id": "heat-outside",
      "text": "Heat Purple Gas",
      "action": [
        "if (get('temperature') < 10000) {",
        "  for (var i = 0; i < getNumberOfAtoms(); i++) {",
        "    var atom = getAtomProperties(i);",
        "    if (atom.x > getObstacleProperties(0).x) {",
        "       setAtomProperties(i, { vx: atom.vx * 1.1, vy: atom.vy * 1.1 }, false, false, {supressRepaint: true})",
        "    }",
        "  }",
        "  repaint();",
        "}",
        "else {",
        "    alert('Max temperature reached.');",
        "}"
      ]
    },
    {
      "type": "button",
      "id": "cool-inside",
      "text": "Cool Yellow Gas",
      "action": [
        "for (var i = 0; i < getNumberOfAtoms(); i++) {",
        "  var atom = getAtomProperties(i);",
        "  if (atom.x < getObstacleProperties(0).x) {",
        "     setAtomProperties(i, { vx: atom.vx * 0.9, vy: atom.vy * 0.9 }, false, false, {supressRepaint: true})",
        "   }",
        "}",
        "repaint();"
      ]
    },
    {
      "type": "button",
      "id": "cool-outside",
      "text": "Cool Purple Gas",
      "action": [
        "for (var i = 0; i < getNumberOfAtoms(); i++) {",
        "  var atom = getAtomProperties(i);",
        "  if (atom.x > getObstacleProperties(0).x) {",
        "     setAtomProperties(i, { vx: atom.vx * 0.9, vy: atom.vy * 0.9}, false, false, {supressRepaint: true})",
        "   }",
        "}",
        "repaint();"
      ]
    }
  ],
  "layout": {
    "bottom": [
      ["add-inside","remove-inside","heat-inside","cool-inside"],
      ["add-outside","remove-outside","heat-outside","cool-outside"],
      ["show-velocity"]
    ]
  }
}