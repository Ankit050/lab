{
  "title": "What is Pressure?",
  "publicationStatus": "public",
  "subtitle": "Explore how gas exerts pressure on the sides of a container.",
  "about": [
    "Gases have no definite shape or volume. When they are constrained to a container, we can measure the pressure they exert on the container walls.",
    "The model shows the inside (yellow atoms) and outside (pink atoms) of a balloon. The green barrier represents the wall of the balloon.",
    "Add atoms to the balloon (the number of atoms in the balloon is shown on the slider). What happens to the balloon wall when atoms are added?"
  ],
  "models": [
    {
      "id": "page2$0",
      "url": "/imports/legacy-mw-content/converted/sam-activities/gas-laws/original-interactives-in-pages/page2/page2$0.json",
      "viewOptions": {
        "controlButtons": "play_reset"
      }
    }
  ],
  "outputs": [
    {
      "name": "atomInside",
      "label": "Atoms Inside Balloon",
      "units": "",
      "value": [
        "var atomNum = 0;",
        "var obsX = getObstacleProperties(0).x;",
        "for (var i = 0; i < getNumberOfAtoms(); i++) {",
        "  if (getAtomProperties(i).x < obsX) {",
        "    atomNum++;",
        "  }",
        "}",
        "return atomNum;"
      ]
    }
  ],
  "components": [
    {
      "type": "checkbox",
      "id": "show-velocity",
      "text": "Show Velocity",
      "property": "showVelocityVectors"
    },
    {
      "type": "button",
      "id": "add-atom",
      "text": "Add an Atom to the Balloon",
      "action": [
        "var elemNum = 3;",
        "var obsX = getObstacleProperties(0).x;",
        "var atomSigma = getElementProperties(elemNum).sigma;",
        "var avgVx = 0;",
        "var avgVy = 0;",
        "var atomNum = getNumberOfAtoms();",
        "for (var i = 0; i < atomNum; i++) {",
        "  avgVx += Math.abs(getAtomProperties(i).vx);",
        "  avgVy += Math.abs(getAtomProperties(i).vy);",
        "}",
        "avgVx /= atomNum;",
        "avgVy /= atomNum;",
        "addAtom({ element: elemNum, x: (obsX - atomSigma) * Math.random()  , y: get('height') * Math.random(), vx: avgVx, vy: avgVy});"
      ]
    },
    {
      "type": "button",
      "id": "remove-atom",
      "text": "Remove an Atom From the Balloon",
      "action": [
        "var atomNum = getNumberOfAtoms();",
        "var obsx = getObstacleProperties(0).x;",
        "if (atomNum > 0) {",
        "  for (var i = 0; i < atomNum; i++) {",
        "    if (getAtomProperties(i).x < obsx) {",
        "      removeAtom(i);",
        "      break;",
        "    }",
        "  }",
        "}"
      ]
    },
    {
      "type": "numericOutput",
      "id": "current-atom-num",
      "property": "atomInside",
      "displayValue": "return format('f')(value)"
    }
  ],
  "layout": {
    "bottom": [
      ["add-atom", "remove-atom"]
    ]
  }
}