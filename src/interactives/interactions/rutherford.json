{
  "title": "rutherford",
  "publicationStatus": "draft",
  "subtitle": "",
  "about": "",
  "aspectRatio": 1.06,
  "models": [
    {
      "type": "md2d",
      "id": "rutherford$0",
      "url": "imports/legacy-mw-content/converted/interactions/rutherford-experiment/rutherford$0.json",
      "importedFrom": "imports/legacy-mw-content/interactions/rutherford-experiment/rutherford$0.mml",
      "viewOptions": {
        "controlButtons": "",
        "electricFieldDensity": 24,
        "electricFieldColor": "rgb(0,128,0)",
        "chargeShading": "true"
      },
      "onLoad": [
        "setAtomProperties(0, {charge: 0.5});",
        "set('atomTraceColor','yellow');",
        "set('timeStepsPerTick',15);",
        "var height  = get('height'),",
        "    offset  = 0.1,",
        "    yBottom = offset,",
        "    yTop    = get('height') - offset,",
        "    xLeft   = offset,",
        "    xRight  = get('width') - offset,",
        "    xCenter = getAtomProperties(0).x,",
        "    yCenter = getAtomProperties(0).y,",
        "    tbdx    = [],",
        "    tbdy    = [],",
        "    ringOffset = 5,",
        "    ringIndex  = 0,",
        "    ringN      = 100;",
        "for (var i = 0; i < ringN; i++) {",
        "  addShape({",
        "    type: 'ellipse',",
        "    x: 10, y: 10,",
        "    width: 0.02,",
        "    height: 0.02,",
        "    lineColor: 'white',",
        "    color: 'white'",
        "  });",
        "}",
        "for (var i = 0, props; i < 9; i++) {",
        "  props = getTextBoxProperties(i);",
        "  tbdx.push( props.x - xCenter);",
        "  tbdy.push( props.y - yCenter);",
        "}",
        "set('tbdx',tbdx);",
        "set('tbdy',tbdy);",
        "callEvery(500, function(){",
        "  var y = offset + randomFloat() * (height - 2*offset);",
        "  addAtom({x: offset, y: y, element: 0, vx: 0.003, vy: 0, charge: 0.5});",
        "});",
        "onPropertyChange('time', function(time){",
        "  batch(function(){",
        "    var scaledRadius = get('chargeRadius');",
        "    // absorb particles that crossed the boundary offsets",
        "    // note atom[0] is the positive particle in the center",
        "    // and this takes advantage that the engine does not modify",
        "    // the atoms N < i when removing atom i",
        "    var props, dx, dy, distanceFromCenter;",
        "    for (var i = getNumberOfAtoms() - 1; i > 0; i--) {",
        "      props = getAtomProperties(i);",
        "      if (props.x > xRight) {",
        "        removeAtom(i);",
        "        continue;",
        "      } else if (props.y < yBottom) {",
        "        removeAtom(i);",
        "        continue;",
        "      } else if (props.y > yTop) {",
        "        removeAtom(i);",
        "        continue;",
        "      } else if (props.x < xLeft) {",
        "        removeAtom(i);",
        "        continue;",
        "      }",
        "      // now remove charge if within radius, or add charge back if outside again",
        "      dx = props.x - xCenter;",
        "      dy = props.y - yCenter;",
        "      distanceFromCenter = Math.sqrt(dx*dx + dy*dy);",
        "      if (props.charge > 0 && distanceFromCenter < scaledRadius) {",
        "        setAtomProperties(i, {charge: 0});",
        "      } else if (props.charge === 0 && distanceFromCenter > scaledRadius) {",
        "        setAtomProperties(i, {charge: 0.5});",
        "      }",
        "    }",
        "    if (time % 60 === 0) {",
        "      for (var i = 1, N = getNumberOfAtoms(); i < N; i++) {",
        "        props = getAtomProperties(i);",
        "        setShapeProperties(ringIndex + ringOffset, {x: props.x, y: props.y});",
        "        ringIndex = (ringIndex + 1) % ringN;",
        "      }",
        "    }",
        "  });",
        "});"
      ]
    }
  ],
  "parameters": [
    {
      "name": "tbdx",
      "initialValue": [],
      "onChange": []
    },
    {
      "name": "tbdy",
      "initialValue": [],
      "onChange": []
    },
    {
      "name": "chargeRadius",
      "initialValue": 1.5,
      "onChange": [
        "var xCenter = getAtomProperties(0).x,",
        "    yCenter = getAtomProperties(0).y,",
        "    x = xCenter - value,",
        "    y = yCenter - value,",
        "    d = 2*value,",
        "    tbdx = get('tbdx'),",
        "    tbdy = get('tbdy');",
        "if (tbdx && tbdx.length > 0) { // only if + symbols exist",
        "  setShapeProperties(4,{x: x, y: y, width: d, height: d});",
        "  for( var i = 0; i < 9; i++) {",
        "    setTextBoxProperties(i,{",
        "      x: xCenter + tbdx[i] * value / 1.5 + (1 - 1.5/value)*0.01,",
        "      y: yCenter + tbdy[i] * value / 1.5 - (1 - 1.5/value)*0.01",
        "    });",
        "  }",
        "}"
      ]
    }
  ],
  "components": [
    {
      "type": "button",
      "id": "shoot-alpha-particles",
      "text": "Shoot alpha particles",
      "action": "start();"
    },
    {
      "type": "button",
      "id": "stop-alpha-particles",
      "text": "Stop",
      "action": "stop();"
    },
    {
      "type": "button",
      "id": "reset",
      "text": "Reset",
      "action": "reset();"
    },
    {
      "type": "slider",
      "id": "select-radius",
      "title": "Set Spread of Positive Charge",
      "min": 0.1,
      "max": 1.5,
      "steps": 30,
      "property": "chargeRadius",
      "labels": [
        {
          "value": 0.1,
          "label": "concentrated"
        },
        {
          "value": 1.5,
          "label": "diffuse"
        }
      ]
    },
    {
      "type": "checkbox",
      "id": "select-show-electric-field",
      "property": "showElectricField",
      "text": "Show electric field"
    }
  ],
  "layout": {
    "bottom": [
      ["shoot-alpha-particles", "stop-alpha-particles", "reset", "select-show-electric-field"],
      ["select-radius"]
    ]
  },
  "template": [
    {
      "id": "bottom",
      "top": "model.bottom",
      "left": "model.left",
      "width": "model.width",
      "align": "center"
    }
  ]
}
