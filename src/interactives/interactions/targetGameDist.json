{
  "title": "Target Game (Distance/Force Relationship)",
  "publicationStatus": "draft",
  "subtitle": "",
  "about": "",
  "models": [
    {
      "type": "md2d",
      "id": "targetGameDist$0",
      "url": "imports/legacy-mw-content/converted/interactions/target-game-distance/targetGameDist-noLabels$0.json",
      "importedFrom": "imports/legacy-mw-content/interactions/target-game-distance/targetGameDist$0.mml",
      "viewOptions": {
        "controlButtons": "",
        "electricFieldDensity": 24
      },
      "onLoad": [
        "setAtomProperties(0,{draggable: true});",
        "setAtomProperties(1,{draggable: true});",
        "setShapeProperties(3, {lineColor: 'rgb(255,0,0)', lineWeight: 7});",
        "set('atomTraceColor','yellow');",
        "onDrag('atom', function (x, y, d, i) {",
        "  if (i === 0) {",
        "    y = Math.max(2.5, Math.min(3.5, y));",
        "    x = 2.312;",
        "  } else if (i === 1) {",
        "    x = Math.max(4, Math.min(5, x));",
        "    y = 3.3595;",
        "  }",
        "  setAtomProperties(i, {x: x, y: y});",
        "});",
        "var timePerTick = get('timePerTick'),",
        "    collisionPadding = 0.075;",
        "callEvery(timePerTick, function() {",
        "  var target = getShapeProperties(2);",
        "  if (atomsWithinRect(target.x, target.y, target.width, target.height).length > 0) {",
        "    alert('you won!');",
        "    stop();",
        "  }",
        "  for (var i = 0; i < 6; i++) {",
        "    target = getObstacleProperties(i);",
        "    if (atomsWithinRect(target.x - collisionPadding, target.y - collisionPadding, target.width + 2*collisionPadding, target.height + 2*collisionPadding).length > 0) {",
        "      alert('you lose!');",
        "      stop();",
        "    }",
        "  }",
        "});",
        "start();"
      ]
    }
  ],
  "components": [
    {
      "type": "button",
      "id": "add-atom",
      "text": "Launch a positive particle",
      "action": [
        "if (getNumberOfAtoms() > 2) removeAtom(getNumberOfAtoms()-1);",
        "addAtom( {x: getShapeProperties(0).x + getShapeProperties(0).width, y: get('height')/2, element: 1, vx: 0.0025, vy: 0, charge: 1});",
        "traceAtom( getNumberOfAtoms() - 1 );"
      ]
    },
    {
      "type": "button",
      "id": "reset",
      "text": "Reset",
      "action": "reload();"
    },
    {
      "type": "checkbox",
      "id": "select-show-force-vectors",
      "text": "Show force on objects",
      "property": "showForceVectors"
    },
    {
      "type": "checkbox",
      "id": "select-show-electric-field",
      "text": "Show electric field",
      "property": "showElectricField"
    }
  ],
  "layout": {
    "bottom": [
      ["add-atom", "reset"],
      ["select-show-electric-field", "select-show-force-vectors"]
    ]
  }
}
